/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TodoItemService } from "../todoItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TodoItemCreateInput } from "./TodoItemCreateInput";
import { TodoItem } from "./TodoItem";
import { TodoItemFindManyArgs } from "./TodoItemFindManyArgs";
import { TodoItemWhereUniqueInput } from "./TodoItemWhereUniqueInput";
import { TodoItemUpdateInput } from "./TodoItemUpdateInput";
import { PomodoroTimerFindManyArgs } from "../../pomodoroTimer/base/PomodoroTimerFindManyArgs";
import { PomodoroTimer } from "../../pomodoroTimer/base/PomodoroTimer";
import { PomodoroTimerWhereUniqueInput } from "../../pomodoroTimer/base/PomodoroTimerWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TodoItemControllerBase {
  constructor(
    protected readonly service: TodoItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TodoItem })
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTodoItem(
    @common.Body() data: TodoItemCreateInput
  ): Promise<TodoItem> {
    return await this.service.createTodoItem({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        isCompleted: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TodoItem] })
  @ApiNestedQuery(TodoItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async todoItems(@common.Req() request: Request): Promise<TodoItem[]> {
    const args = plainToClass(TodoItemFindManyArgs, request.query);
    return this.service.todoItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        isCompleted: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TodoItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async todoItem(
    @common.Param() params: TodoItemWhereUniqueInput
  ): Promise<TodoItem | null> {
    const result = await this.service.todoItem({
      where: params,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        isCompleted: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TodoItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTodoItem(
    @common.Param() params: TodoItemWhereUniqueInput,
    @common.Body() data: TodoItemUpdateInput
  ): Promise<TodoItem | null> {
    try {
      return await this.service.updateTodoItem({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          isCompleted: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TodoItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTodoItem(
    @common.Param() params: TodoItemWhereUniqueInput
  ): Promise<TodoItem | null> {
    try {
      return await this.service.deleteTodoItem({
        where: params,
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          isCompleted: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pomodoroTimers")
  @ApiNestedQuery(PomodoroTimerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PomodoroTimer",
    action: "read",
    possession: "any",
  })
  async findPomodoroTimers(
    @common.Req() request: Request,
    @common.Param() params: TodoItemWhereUniqueInput
  ): Promise<PomodoroTimer[]> {
    const query = plainToClass(PomodoroTimerFindManyArgs, request.query);
    const results = await this.service.findPomodoroTimers(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,

        todoItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pomodoroTimers")
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "update",
    possession: "any",
  })
  async connectPomodoroTimers(
    @common.Param() params: TodoItemWhereUniqueInput,
    @common.Body() body: PomodoroTimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pomodoroTimers: {
        connect: body,
      },
    };
    await this.service.updateTodoItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pomodoroTimers")
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "update",
    possession: "any",
  })
  async updatePomodoroTimers(
    @common.Param() params: TodoItemWhereUniqueInput,
    @common.Body() body: PomodoroTimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pomodoroTimers: {
        set: body,
      },
    };
    await this.service.updateTodoItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pomodoroTimers")
  @nestAccessControl.UseRoles({
    resource: "TodoItem",
    action: "update",
    possession: "any",
  })
  async disconnectPomodoroTimers(
    @common.Param() params: TodoItemWhereUniqueInput,
    @common.Body() body: PomodoroTimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pomodoroTimers: {
        disconnect: body,
      },
    };
    await this.service.updateTodoItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
